import time 

GLOBAL_FUNCTION_PREFIX = '_' #change to not copy lodash or something...
RELATIVE_LIBRARY_DESTINATION = '../js/lib/'

def headerString():
	return '/* This file was generated by the generateJSLib.py file  at ' + str(time.strftime("%H:%M:%S")) + ' on ' + str(time.strftime("%d/%m/%Y"))  + ' */\n' 

def functionStringHelper(name, args):
	return ''.join([name, '(', ', '.join(args), ')'])

def functionLocalName(localPrefix, name):
	return localPrefix + name

def functionGlobalName(name):
	return GLOBAL_FUNCTION_PREFIX + name

def functionString(localPrefix, name, args, result):
	return ''.join(['function ', functionStringHelper(functionGlobalName(functionLocalName(localPrefix, name)), args), '{ return ', result, '; }\n']);

def generateHtmlDotJs():

	htmlPrefix = ''
	htmlElements = ['a', 'abbr', 'address', 'area',	'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'command', 'datalist', 'dd', 'del', 'details', 'dfn', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'map', 'mark', 'menu', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr']
	f = open(RELATIVE_LIBRARY_DESTINATION + 'html.js', 'w')
	f.write(headerString())
	f.write(functionString(htmlPrefix, 'htmlElements', ['name'], functionStringHelper('withLabel', ['emptyElement()', 'name'])))
	for elem in htmlElements:
		f.write(functionString(htmlPrefix, elem, [], functionStringHelper(functionGlobalName(functionLocalName(htmlPrefix, 'htmlElements')), [elem])))
	f.close()

def generateBootstrapDotJs():
	f = open(RELATIVE_LIBRARY_DESTINATION + 'bootstrap.js', 'w');
	bootstrapFunctionPrefix = 'bs'
	bootstrapDivClasses = ['container', 'container-fluid', 'row', 'pull-right', 'pull-left', 'center-block', 'page-footer', 'text-center', 'jumbotron']

	f.write(headerString())

	f.write(functionString(bootstrapFunctionPrefix, 'DivMod', ['newClass'], functionStringHelper('withClass', ['_div()', 'newClass'])))
	def quoteWrapper(name):
		return '\'' + name + '\''

	def bootstrapNameHelper(name):
		return ''.join([elem[0].upper() + elem[1:] for elem in name.split('-')])

	def bootstrapFunctionString(name):
		return functionString(bootstrapFunctionPrefix, bootstrapNameHelper(name), [], functionStringHelper('_bsDivMod', [quoteWrapper(name)]))

	def bootstrapApplyFunctionString(name):
		return functionString(bootstrapFunctionPrefix, 'Apply' + bootstrapNameHelper(name), ['element'], functionStringHelper('withAnotherClass', ['element', quoteWrapper(name)]))

	for elem in bootstrapDivClasses:
		f.write(bootstrapFunctionString(elem))
		f.write(bootstrapApplyFunctionString(elem))

	for size in ['xs', 'sm', 'md', 'lg']:
		for value in range(0, 12):
			name = 'col-' + size + '-' + str(value)
			f.write(bootstrapFunctionString(name))
			f.write(bootstrapApplyFunctionString(name))

	f.close();

generateHtmlDotJs()
generateBootstrapDotJs()